name: Classic Games - Build and Release

# Permissions needed for releases
permissions:
  contents: write
  packages: write
  actions: read

on:
  push:
    tags:
      - 'snake-v*'
      - 'pong-v*'
      - '*-v*'  # Support for future games
    branches: [ main, develop/*, feature/* ]
    paths:
      - 'snake/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'snake/**'
      - '.github/workflows/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      snake: ${{ steps.changes.outputs.snake }}
      # Future games will be added here
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          snake:
            - 'snake/**'

  test-snake:
    needs: detect-changes
    if: needs.detect-changes.outputs.snake == 'true' || startsWith(github.ref, 'refs/tags/snake-v')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Snake dependencies
      run: |
        cd snake/
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run Snake tests
      run: |
        cd snake/
        pytest tests/ -v

  build-snake:
    needs: [detect-changes, test-snake]
    if: needs.detect-changes.outputs.snake == 'true' || startsWith(github.ref, 'refs/tags/snake-v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Snake dependencies
      run: |
        cd snake/
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install pyinstaller

    - name: Build Snake package
      run: |
        cd snake/
        python -m build

    - name: Build Snake executable (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd snake/
        pyinstaller --onefile --name SnakeGame-linux run_snake.py

    - name: Build Snake executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd snake/
        pyinstaller --onefile --name SnakeGame-windows.exe run_snake.py

    - name: Upload Snake artifacts
      uses: actions/upload-artifact@v4
      with:
        name: snake-game-${{ matrix.os }}
        path: |
          snake/dist/

  release-snake:
    if: startsWith(github.ref, 'refs/tags/snake-v')
    needs: build-snake
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download Ubuntu artifacts
      uses: actions/download-artifact@v4
      with:
        name: snake-game-ubuntu-latest
        path: dist-ubuntu/

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: snake-game-windows-latest
        path: dist-windows/

    - name: Create release directory
      run: |
        mkdir -p release-files
        cp dist-ubuntu/*.whl release-files/ 2>/dev/null || true
        cp dist-ubuntu/*.tar.gz release-files/ 2>/dev/null || true
        cp dist-ubuntu/SnakeGame-linux release-files/ 2>/dev/null || true
        cp dist-windows/SnakeGame-windows.exe release-files/ 2>/dev/null || true
        ls -la release-files/

    - name: Create Snake Release
      uses: softprops/action-gh-release@v2
      with:
        files: release-files/*
        generate_release_notes: true
        tag_name: ${{ github.ref_name }}
        name: "Snake Game ${{ github.ref_name }}"
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
